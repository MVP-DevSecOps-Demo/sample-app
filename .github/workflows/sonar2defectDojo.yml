name: SonarQube + DefectDojo Integration

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  sonar_and_dojo:
    runs-on: ubuntu-latest

    env:
      SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      DOJO_URL: ${{ vars.DOJO_URL }}
      DOJO_API_KEY: ${{ secrets.DOJO_API_KEY }}
      DOJO_ENGAGEMENT_ID: ${{ vars.DOJO_ENGAGEMENT_ID }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run SonarQube Scan
        continue-on-error: true
        run: |
          echo "üîç Running SonarQube scan..."
          sonar-scanner \
            -Dsonar.projectKey=MVP-DevSecOps-Demo_sample-app \
            -Dsonar.organization=mvp-devsecops-demo \
            -Dsonar.sources=. \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN

      - name: Wait for SonarQube to complete analysis
        if: always()
        run: sleep 20

      - name: Collect and map SonarQube vulnerabilities
        if: always()
        run: |
          echo "üì• Fetching SonarQube issues..."
          if [ -z "$SONAR_HOST_URL" ]; then
            echo "‚ùå SONAR_HOST_URL is not set!"
            exit 1
          fi

          echo "Using SonarQube host: $SONAR_HOST_URL"

          curl -s -u "$SONAR_TOKEN:" \
            "$SONAR_HOST_URL/api/issues/search?componentKeys=MVP-DevSecOps-Demo_sample-app&types=VULNERABILITY&ps=500" \
            -o sonar_raw.json

          if [ ! -s sonar_raw.json ]; then
            echo "‚ùå No data returned from SonarQube. Check component key or token."
            exit 1
          fi

          echo "üß© Mapping Sonar severities to DefectDojo format..."
          cat sonar_raw.json | jq '{
            findings: (.issues | map({
              title: .message,
              severity: (if .severity == "BLOCKER" then "Critical"
                         elif .severity == "CRITICAL" then "High"
                         elif .severity == "MAJOR" then "Medium"
                         elif .severity == "MINOR" then "Low"
                         else "Info" end),
              cwe: 0,
              file_path: .component,
              description: .message,
              unique_id_from_tool: .key,
              line: .line,
              mitigation: .message,
              impact: .severity,
              references: .project,
              static_finding: true,
              active: true,
              verified: false
            }))
          }' > sonar_mapped.json

          echo "‚úÖ Generated sonar_mapped.json with $(cat sonar_mapped.json | jq '.findings | length') findings."

      - name: Upload to DefectDojo
        if: success() || failure()
        run: |
          echo "‚¨ÜÔ∏è Uploading mapped findings to DefectDojo..."
          if [ ! -f sonar_mapped.json ]; then
            echo "‚ùå sonar_mapped.json not found. Skipping upload."
            exit 0
          fi

          echo "Using DefectDojo URL: $DOJO_URL"

          curl -X POST "$DOJO_URL/api/v2/import-scan/" \
            -H "Authorization: Token $DOJO_API_KEY" \
            -F "engagement=$DOJO_ENGAGEMENT_ID" \
            -F "scan_type=SonarQube Scan" \
            -F "file=@sonar_mapped.json" \
            -F "active=true" \
            -F "verified=false" \
            -F "close_old_findings=false"

          echo "‚úÖ DefectDojo upload completed."

      - name: Finish
        if: always()
        run: echo "üèÅ Workflow complete ‚Äî SonarQube ‚Üí DefectDojo pipeline done."
