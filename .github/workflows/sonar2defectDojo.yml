name: SonarQube + DefectDojo Integration

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  sonar_and_dojo:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install SonarScanner CLI
        run: |
          echo "Installing SonarScanner CLI..."
          sudo apt-get update -y
          sudo apt-get install -y unzip
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner.zip
          sudo mv sonar-scanner-* /opt/sonar-scanner
          sudo ln -s /opt/sonar-scanner/bin/sonar-scanner /usr/local/bin/sonar-scanner
          sonar-scanner --version

      - name: Run SonarQube Scan
        continue-on-error: true
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
        run: |
          echo "üîç Running SonarQube scan..."
          sonar-scanner \
            -Dsonar.projectKey=MVP-DevSecOps-Demo_sample-app \
            -Dsonar.organization=mvp-devsecops-demo \
            -Dsonar.sources=. \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN

      - name: Wait for SonarQube analysis
        if: always()
        run: sleep 15

      - name: Fetch SonarQube issues
        if: always()
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
        run: |
          echo "üì• Fetching SonarQube issues..."
          curl -s "${SONAR_HOST_URL}/api/issues/search?componentKeys=MVP-DevSecOps-Demo_sample-app&types=VULNERABILITY&ps=500" \
            -u $SONAR_TOKEN: > sonar_raw.json || exit 0

          if [ ! -s sonar_raw.json ]; then
            echo "‚ùå No SonarQube data found ‚Äî skipping mapping."
            exit 0
          fi

          echo "üß© Mapping Sonar severities to DefectDojo format..."
          cat sonar_raw.json | jq '{
            findings: (.issues | map({
              title: .message,
              severity: (if .severity == "BLOCKER" then "Critical"
                         elif .severity == "CRITICAL" then "High"
                         elif .severity == "MAJOR" then "Medium"
                         elif .severity == "MINOR" then "Low"
                         else "Info" end),
              cwe: 0,
              file_path: (.component | sub("MVP-DevSecOps-Demo_sample-app:"; "")),
              description: .message,
              unique_id_from_tool: .key,
              line: (.line // 1),
              mitigation: .message,
              impact: .severity,
              references: .project,
              static_finding: true,
              active: true,
              verified: false,
              test_type: "SonarQube Scan"
            }))
          }' > sonar_mapped.json

          echo "‚úÖ Generated sonar_mapped.json with $(jq '.findings | length' sonar_mapped.json) findings."
          echo "üìù Preview first 3 findings:"
          jq '.findings[:3]' sonar_mapped.json

      - name: Ensure SonarQube Test Exists in DefectDojo
        if: success()
        env:
          DOJO_URL: ${{ vars.DOJO_URL }}
          DOJO_API_KEY: ${{ secrets.DOJO_API_KEY }}
          DOJO_ENGAGEMENT_ID: ${{ secrets.DOJO_ENGAGEMENT_ID }}
        run: |
          echo "üîé Checking if SonarQube Scan test exists..."
          TEST_ID=$(curl -s -H "Authorization: Token $DOJO_API_KEY" \
            "$DOJO_URL/api/v2/tests/?engagement=$DOJO_ENGAGEMENT_ID&scan_type=SonarQube Scan" \
            | jq -r '.results[0].id // empty')

          if [ -z "$TEST_ID" ]; then
            echo "üÜï No existing SonarQube test found. Creating a new test..."
            TEST_ID=$(curl -s -X POST -H "Authorization: Token $DOJO_API_KEY" \
              -F "engagement=$DOJO_ENGAGEMENT_ID" \
              -F "scan_type=SonarQube Scan" \
              -F "title=SonarQube Scan $(date +'%Y-%m-%d %H:%M:%S')" \
              "$DOJO_URL/api/v2/tests/" | jq -r '.id')
            echo "‚úÖ Created new test with ID: $TEST_ID"
          else
            echo "‚úÖ Found existing test with ID: $TEST_ID"
          fi

          echo "##vso[task.setvariable variable=DOJO_TEST_ID]$TEST_ID"

      - name: Upload findings to DefectDojo
        if: success() && steps.Ensure_SonarQube_Test_Exists_in_DefectDojo.outcome == 'success'
        env:
          DOJO_URL: ${{ vars.DOJO_URL }}
          DOJO_API_KEY: ${{ secrets.DOJO_API_KEY }}
          DOJO_TEST_ID: ${{ env.DOJO_TEST_ID }}
        run: |
          if [ ! -f sonar_mapped.json ]; then
            echo "‚ùå sonar_mapped.json not found. Skipping upload."
            exit 0
          fi

          echo "üöÄ Uploading mapped findings to DefectDojo..."
          curl -X POST "$DOJO_URL/api/v2/import-scan/" \
            -H "Authorization: Token $DOJO_API_KEY" \
            -F "test=$DOJO_TEST_ID" \
            -F "scan_type=SonarQube Scan" \
            -F "file=@sonar_mapped.json" \
            -F "active=true" \
            -F "verified=false" \
            -F "close_old_findings=false"

          echo "‚úÖ DefectDojo upload completed."

      - name: Finish
        if: always()
        run: echo "üéØ Workflow complete ‚Äî SonarQube ‚Üí DefectDojo pipeline done."
