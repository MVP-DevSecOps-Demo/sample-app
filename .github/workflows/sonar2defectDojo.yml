name: SonarQube ‚Üí DefectDojo Integration

on:
  workflow_dispatch:
  push:
    branches: ["main"]

jobs:
  sonar-to-defectdojo:
    runs-on: ubuntu-latest

    env:
      SONAR_HOST_URL: https://sonarcloud.io
      SONAR_PROJECT_KEY: MVP-DevSecOps-Demo_sample-app
      DOJO_URL: ${{ vars.DOJO_URL }}
      DOJO_API_KEY: ${{ secrets.DOJO_API_KEY }}
      DOJO_ENGAGEMENT_ID: ${{ vars.DOJO_ENGAGEMENT_ID }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    steps:
      - name: üß© Checkout repository
        uses: actions/checkout@v4

      - name: üõ†Ô∏è Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq curl

      - name: üìã List DefectDojo test types (debug)
        run: |
          echo "üìã Listing available DefectDojo test types..."
          curl -s -X GET "$DOJO_URL/api/v2/test_types/" \
            -H "Authorization: Token $DOJO_API_KEY" | jq '.results[].name'

      - name: üîç Run SonarQube scan
        run: |
          echo "üîç Running SonarQube scan..."
          npm install
          npx sonar-scanner \
            -Dsonar.projectKey=$SONAR_PROJECT_KEY \
            -Dsonar.organization=mvp-devsecops-demo \
            -Dsonar.sources=. \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN

      - name: üì• Fetch SonarQube issues
        run: |
          echo "üì• Fetching issues from SonarCloud project: $SONAR_PROJECT_KEY"
          curl -s "${SONAR_HOST_URL}/api/issues/search?componentKeys=$SONAR_PROJECT_KEY&types=VULNERABILITY&ps=500" \
            -u $SONAR_TOKEN: > sonar_raw.json || exit 1

          if [ ! -s sonar_raw.json ]; then
            echo "‚ùå No issues found from SonarQube ‚Äî skipping upload."
            exit 1
          fi

      - name: üß© Map SonarQube findings to DefectDojo format
        run: |
          echo "üß© Mapping SonarQube findings to DefectDojo format..."
          cat sonar_raw.json | jq '{
            findings: (.issues | map({
              title: .message,
              severity: (if .severity == "BLOCKER" then "Critical"
                         elif .severity == "CRITICAL" then "High"
                         elif .severity == "MA
