name: 🔍 SonarQube to DefectDojo Upload

on:
  workflow_dispatch:

jobs:
  sonar-to-defectdojo:
    runs-on: ubuntu-latest

    env:
      SONAR_HOST_URL: https://sonarcloud.io
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_PROJECT_KEY: MVP-DevSecOps-Demo_sample-app
      DOJO_URL: ${{ secrets.DOJO_URL }}
      DOJO_API_KEY: ${{ secrets.DOJO_API_KEY }}
      DOJO_ENGAGEMENT_ID: 3

    steps:
      - name: 🛠️ Checkout code
        uses: actions/checkout@v4

      - name: ⚡ Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 🧩 Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq
          npm install -g sonar-scanner

      - name: 📋 Check if 'SonarQube Scan' test type exists
        run: |
          echo "📋 Checking if 'SonarQube Scan' test type exists..."
          response=$(curl -s -X GET "$DOJO_URL/api/v2/test_types/" \
            -H "Authorization: Token $DOJO_API_KEY")
          
          if echo "$response" | jq -e '.results[].name' | grep -q "SonarQube Scan"; then
            echo "✅ 'SonarQube Scan' already exists."
          else
            echo "🆕 Creating 'SonarQube Scan' test type..."
            curl -s -X POST "$DOJO_URL/api/v2/test_types/" \
              -H "Authorization: Token $DOJO_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{"name": "SonarQube Scan", "description": "SonarQube static analysis results"}' \
              | jq .
          fi

      - name: 🔍 Run SonarQube scan
        run: |
          echo "🔍 Running SonarQube scan..."
          sonar-scanner \
            -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
            -Dsonar.organization=mvpdemo \
            -Dsonar.sources=. \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.login=${SONAR_TOKEN}

      - name: 📥 Fetch SonarQube issues
        run: |
          echo "📥 Fetching issues from SonarCloud project: $SONAR_PROJECT_KEY"
          curl -s -u "${SONAR_TOKEN}:" \
            "$SONAR_HOST_URL/api/issues/search?componentKeys=$SONAR_PROJECT_KEY" \
            | jq '.' > sonar_issues.json

      - name: 🧩 Map SonarQube findings to DefectDojo format
        run: |
          echo "🧩 Mapping SonarQube findings to DefectDojo format..."
          jq -r '
            .issues[] | {
              title: .message,
              severity: (if .severity == "BLOCKER" or .severity == "CRITICAL" then "Critical"
                         elif .severity == "MAJOR" then "High"
                         elif .severity == "MINOR" then "Medium"
                         elif .severity == "INFO" then "Low"
                         else "Info" end),
              cwe: 0,
              file_path: .component | split(":") | .[1],
              description: .message,
              unique_id_from_tool: .key,
              line: .line,
              mitigation: .message,
              impact: .severity,
              references: .project,
              static_finding: true,
              active: true,
              verified: false,
              date: .creationDate,
              test_type: "SonarQube Scan"
            }
          ' sonar_issues.json > sonar_mapped.json

          count=$(jq length sonar_mapped.json)
          echo "✅ Generated sonar_mapped.json with $count findings."
          echo "📝 Preview first 3 findings:"
          jq '.[0:3]' sonar_mapped.json

      - name: 🚀 Upload SonarQube findings to DefectDojo
        run: |
          echo "🚀 Uploading SonarQube findings to DefectDojo Engagement ID $DOJO_ENGAGEMENT_ID"
          response=$(curl -s -X POST "$DOJO_URL/api/v2/import-scan/" \
            -H "Authorization: Token $DOJO_API_KEY" \
            -F "engagement=$DOJO_ENGAGEMENT_ID" \
            -F "scan_type=SonarQube Scan" \
            -F "file=@sonar_mapped.json" \
            -F "active=true" \
            -F "verified=false" \
            -F "minimum_severity=Info" \
            -F "close_old_findings=false" \
            -F "push_to_jira=false")

          echo "$response" | jq .
          echo "✅ Upload completed."
