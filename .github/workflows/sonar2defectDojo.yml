name: SonarQube SAST with DefectDojo Upload

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  sonarqube-defectdojo:
    runs-on: ubuntu-latest

    env:
      SONAR_HOST_URL: https://sonarcloud.io
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_PROJECT_KEY: MVP-DevSecOps-Demo_sample-app
      DOJO_URL: ${{ secrets.DOJO_URL }}
      DOJO_API_KEY: ${{ secrets.DOJO_API_KEY }}
      DOJO_ENGAGEMENT_ID: 3

    steps:
      - name: üì¶ Checkout repository
        uses: actions/checkout@v4

      - name: üß† Verify DefectDojo connectivity
        run: |
          echo "üîó Checking connection to $DOJO_URL..."
          if ! curl -fs --connect-timeout 10 "$DOJO_URL/api/v2/system_settings/" \
            -H "Authorization: Token $DOJO_API_KEY" >/dev/null; then
            echo "‚ùå Cannot reach DefectDojo at $DOJO_URL ‚Äî please check ngrok or network access."
            exit 1
          fi
          echo "‚úÖ DefectDojo reachable."

      - name: ‚öôÔ∏è Setup Node.js (required by scanner)
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: üß∞ Install dependencies (if applicable)
        run: |
          if [ -f "package.json" ]; then
            npm install
          else
            echo "‚ö†Ô∏è No package.json found ‚Äî skipping npm install"
          fi

      - name: üîç Run SonarQube Scan
        run: |
          echo "üöÄ Starting SonarQube analysis..."
          npx sonar-scanner \
            -Dsonar.organization=mvpdemo \
            -Dsonar.projectKey=$SONAR_PROJECT_KEY \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.sources=.

      - name: üìã Check if 'SonarQube Scan' test type exists
        run: |
          echo "üìã Checking if 'SonarQube Scan' test type exists..."
          response=$(curl -s -X GET "$DOJO_URL/api/v2/test_types/" \
            -H "Authorization: Token $DOJO_API_KEY")
          
          if echo "$response" | jq -e '.results[].name' | grep -q "SonarQube Scan"; then
            echo "‚úÖ 'SonarQube Scan' already exists."
          else
            echo "üÜï Creating 'SonarQube Scan' test type..."
            curl -s -X POST "$DOJO_URL/api/v2/test_types/" \
              -H "Authorization: Token $DOJO_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{"name": "SonarQube Scan", "description": "SonarQube static analysis results"}' \
              | jq .
          fi

      - name: üì§ Upload SonarQube results to DefectDojo
        run: |
          echo "üì§ Uploading SonarQube results to DefectDojo..."
          # Replace this with actual path to SonarQube JSON or generic import file if you have it
          # Example assumes you generate or export report to sonar-report.json
          if [ -f "sonar-report.json" ]; then
            curl -s -X POST "$DOJO_URL/api/v2/import-scan/" \
              -H "Authorization: Token $DOJO_API_KEY" \
              -F "engagement=$DOJO_ENGAGEMENT_ID" \
              -F "scan_type=SonarQube Scan" \
              -F "file=@sonar-report.json" \
              | jq .
          else
            echo "‚ö†Ô∏è sonar-report.json not found ‚Äî skipping upload."
          fi
