name: SonarQube + DefectDojo Integration

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  sonar_and_dojo:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run SonarQube Scan
        continue-on-error: true
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          echo "Running SonarQube scan..."
          sonar-scanner \
            -Dsonar.projectKey=MVP-DevSecOps-Demo_sample-app \
            -Dsonar.organization=mvp-devsecops-demo \
            -Dsonar.sources=. \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: Wait for SonarQube to finalize analysis
        if: always()
        run: |
          echo "Waiting for SonarQube to complete analysis..."
          sleep 15

      - name: Collect and map SonarQube vulnerabilities
        if: always()
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          echo "Fetching SonarQube issues..."
          curl -s "${{ secrets.SONAR_HOST_URL }}/api/issues/search?componentKeys=MVP-DevSecOps-Demo_sample-app&types=VULNERABILITY&ps=500" \
            -u ${{ secrets.SONAR_TOKEN }}: > sonar_raw.json

          echo "Mapping Sonar severities to DefectDojo format..."
          cat sonar_raw.json | jq '{
            findings: (.issues | map({
              title: .message,
              severity: (if .severity == "BLOCKER" then "Critical"
                         elif .severity == "CRITICAL" then "High"
                         elif .severity == "MAJOR" then "Medium"
                         elif .severity == "MINOR" then "Low"
                         else "Info" end),
              cwe: 0,
              file_path: .component,
              description: .message,
              unique_id_from_tool: .key,
              line: .line,
              mitigation: .message,
              impact: .severity,
              references: .project,
              static_finding: true,
              active: true,
              verified: false
            }))
          }' > sonar_mapped.json

          echo "Generated mapped file: sonar_mapped.json"
          cat sonar_mapped.json | jq '.findings | length'

      - name: Upload to DefectDojo
        if: always()
        env:
          DOJO_URL: ${{ secrets.DOJO_URL }}
          DOJO_API_KEY: ${{ secrets.DOJO_API_KEY }}
          DOJO_ENGAGEMENT_ID: ${{ secrets.DOJO_ENGAGEMENT_ID }}
        run: |
          echo "Uploading mapped findings to DefectDojo..."
          curl -X POST "$DOJO_URL/api/v2/import-scan/" \
            -H "Authorization: Token $DOJO_API_KEY" \
            -F "engagement=$DOJO_ENGAGEMENT_ID" \
            -F "scan_type=SonarQube Scan" \
            -F "file=@sonar_mapped.json" \
            -F "active=true" \
            -F "verified=false" \
            -F "close_old_findings=false"

          echo "✅ DefectDojo upload completed."

      - name: Finish
        if: always()
        run: echo "✅ Workflow complete — SonarQube → DefectDojo pipeline done."
